<?php
    require("./config.php");

	//
	// *************************************************************************************************
	//  there are no config settings below here
	// *************************************************************************************************
	//

	//
	// check for correct usage
	//
	if (count($argv) < 3) {
		die("php classy.php <table_name> <class_name> [mode][min][ext]");
	}

	$table_name = $argv[1];
	$class_name = $argv[2];

	$argidx = 3;
	$code_mode = isset($argv[$argidx]) ? $argv[$argidx]:'';
	if ($code_mode=='php' || $code_mode=='js' || $code_mode=='backbone') {
		$argidx = 4;
	}
	else {
		$code_mode='php';
	}

	$arg3 = isset($argv[$argidx]) ? $argv[$argidx]:'';
	$minimal = ($arg3 === 'min') ? TRUE:FALSE;
	$extends = ($arg3 === 'ext') ? TRUE:FALSE;
	if ($extends)
		$extends = $argv[$argidx+1];
	else
		$extends = '';

	//
	// connect to the db
	//
	$DB = new mysqli($db_host, $db_user, $db_pw, $db_name, $db_port);
	if ($DB->connect_error) {
   		die('Connect Error (' . $DB->connect_errno . ') ' . $DB->connect_error);
	}

	//
	// get the table description
	//
	if (!($result = $DB->query("show full columns from $table_name")))
		die($DB->error);

	$description_obj = array();
	while ($obj = $result->fetch_object()) {
		$description_obj[] = $obj;
		/*
		$x = new stdClass();
		
		$x->Field = $obj->COLUMN_NAME;		
		$x->Type = $obj->COLUMN_TYPE;
		$x->Null = $obj->IS_NULLABLE;
		$x->Key = $obj->COLUMN_KEY;
		$x->Default = $obj->COLUMN_DEFAULT;
		$x->Extra = $obj->EXTRA;
		$x->Comment = $obj->COLUMN_COMMENT;

		$description_obj[] = $x;
		*/
	}
	$result->close();

	
	//
	// output tbl header
	//
	if ($code_mode == 'php') {
		if ($extends === '') {
			echo "<?php\n",
				 "/** \n",
				 " * Class interface for '*{$table_name}*'\n",
				 " * - *generated by classy.php from the table '{$table_name}' on host '$db_host'*\n",
				 " *\n",
				 " * @class $class_name\n",
				 " */\n",
				 "\n",
				 "class $class_name {\n";
		}
		else {
			echo "<?php\n",
				 "/** \n",
				 " * Class interface for '*{$table_name}*'\n",
				 " * - *generated by classy.php from the table '{$table_name}' on host '$db_host'*\n",
				 " *\n",
				 " * @class $class_name\n",
				 " */\n",
				 "\n",
				 "class $class_name extends $extends {\n";
		}
	}
	else if ($code_mode=='js') {
		echo "/** \n",
			 " * Classs interface for $table_name\n",
			 " *\n",
			 " * @class $class_name\n",
			 " *\n",
			 " * @param object obj\toptional object or array to initialize with\n",
			 " */\n";
		echo "function $class_name(obj) {\n";
	}
	else if ($code_mode=='backbone') {
		echo "/** \n",
			 " * Backbone interface for $table_name\n",
			 " *\n",
			 " * @class $class_name\n",
			 " *\n",
			 " * @param object obj\toptional object or array to initialize with\n",
			 " */\n";
		echo "var $class_name = Backbone.Model.extend({\n";
	}

	$indent = 1;
	$tabs = indent();
	$tab2 = $tabs . "\t";
	$tab3 = $tab2 . "\t";
	$tab4 = $tab3 . "\t";


	doVARS();
	doCTOR();
	if ($ACCESS_METHOD == 'private')
		doGetterSetter();
	doCOPY();

	if (!$minimal) {
		doLOAD();
		doDELETE();
		doINSERT();
		doUPDATE();

		if (DO_STATIC)
			doSTATIC();
	}

	echo "}\n?>\n";	// all done!
	exit();


//
//  output constructor code
//
function doCTOR() {
	global $minimal,$extends;
	global $description_obj,$table_name;
	global $table_name, $class_name;
	global $tabs, $tab2, $tab3, $tab4;

	if ($minimal) {
		$c = array('Constructor', '', "@param object \$obj\toptional object or array to initialize with");	
	}
	else {
		$c = array('Constructor', '', "@param mysqli \$db\tinstance of mysqli", "@param object \$obj\toptional object or array to initialize with");
	}
	fComment($tabs,$c);


	if ($minimal) {
		echo $tabs,"public function __construct(\$obj=null) {\n";
		if ($extends != '') {
			echo $tab2,"parent::__construct(\$obj);\n\n";
		}
	}
	else {
		echo $tabs,"public function __construct(\$db=null,\$obj=null) {\n";

		echo $tab2,"if (\$db == null)\n",
			 $tab3,"\$db = \$GLOBALS['DB'];\n\n";

		if ($extends != '') {
			echo $tab2,"parent::__construct(\$db,\$obj);\n\n";
		}
		echo $tab2,"\$this->DB = \$db;\n",
			 $tab2,"\$this->_affected_rows = 0;\n",
		 	 $tab2,"\$this->_last_error = '';\n\n";
	}
	
	fComment2($tab2,"columns from the '$table_name' table");


	foreach($description_obj as $obj) {
		//print_r($obj);

		if (strpos($obj->Type,"int") !== false) {
			if ($obj->Default == '')
				$obj->Default = 0;
			echo $tab2,"\$this->{$obj->Field} = $obj->Default;\n";
		}
		else if (!strncmp($obj->Type,"decimal",7) || !strncmp($obj->Type,"float",5)) {
			if ($obj->Default == '')
				$obj->Default = 0;
			echo $tab2,"\$this->{$obj->Field} = $obj->Default;\n";
		}
		else if ($obj->Type === "timestamp") {
			if ($obj->Default === 'CURRENT_TIMESTAMP') {
				echo $tab2,"\$this->{$obj->Field} = date('Y-m-d H:i:s');\n";
			}
		}
		else if (strpos($obj->Type,"date") !== false) {
			echo $tab2,"\$this->{$obj->Field}\t=\tdate('Y-m-d H:i:s');\t\t\n";
			//echo $tab2,"\$this->{$obj->Field} = '';\n";
		}
		else {
			if ($obj->Default == '')
				$obj->Default = "";
			echo $tab2,"\$this->{$obj->Field} = '$obj->Default';\n";
		}
	}
	echo "\n";

	fComment2($tab2,"if \$obj is set, update class members");
	echo $tab2, "\$this->copy(\$obj);\n";
	echo $tabs,"}\n\n";
	// echo $tab2,"if (\$obj !== null) {\n";
	// 	generateObjArrayCluster('this', 'obj', $tab3);
		
	// 	echo $tab2,"}\n",
	// 	 "$tabs}\n\n";

}


//
//  output var's
//
function doVARS() {
	global $minimal;
	global $description_obj;
	global $table_name, $class_name;
	global $tabs, $ACCESS_METHOD;

	$now = date('Y-m-d H:i:s');
	if ($minimal) {
		echo $tabs,"public  static \$_created  = '{$now} UTC';\n\n";
	}
	else {
		echo $tabs,"public  static \$_created  = '{$now} UTC';\n",
			 $tabs,"private static \$_instance = null;\n\n";
	}

	//fComment($tabs,"fields");
	foreach($description_obj as $obj) {
		$c = trim($obj->Comment) === '' ? $obj->Type:"$obj->Comment - $obj->Type";
		$cmt = "/// $c ";
		if ($obj->Key==='PRI')	$cmt .= " (primary key)";
		if ($obj->Key==='MUL')	$cmt .= " (key)";
		if ($obj->Extra === 'auto_increment') 	$cmt .= ' auto inc';

		//echo $tabs, tabTo("$ACCESS_METHOD \${$obj->Field};", 5, 29), "{$cmt}\n";		
		echo $tabs, "{$cmt}\n";
		echo $tabs, "$ACCESS_METHOD \${$obj->Field};\n\n";
	}
	if (!$minimal) {
		echo "\n";
		echo $tabs,"public \$_last_error;\n";
		echo $tabs,"public \$_affected_rows;\n";
		echo $tabs,"public \$DB;\n";
		if (DO_PREPARED) {
			echo $tabs,"private \$prep_load = null;\n";
			echo $tabs,"private \$prep_delete = null;\n";
			echo $tabs,"private \$prep_insert = null;\n";
			echo $tabs,"private \$prep_update = null;\n";
		}
	}
	echo "\n\n";
}



//
// output tbl getters & setters
//
function doGetterSetter() {
	global $description_obj;
	global $table_name, $class_name;
	global $tabs, $tab2, $tab3;

	fComment($tabs,"Getters and Setters");
	foreach($description_obj as $obj) {
		//print_r($obj);

		echo $tabs,"/// getter for '$obj->Field'\n",
			 $tabs,"public function get_{$obj->Field}()\t\t{return \$this->$obj->Field;}\n",
			 $tabs,"/// setter for '$obj->Field'\n",
			 $tabs,"public function set_{$obj->Field}(\$val)\t{\$this->$obj->Field = ",assignEscape($obj),";}\n",
			 "\n";
	}
	echo $tabs,"public function get_last_error()\t\t{return \$this->_last_error;}\n";
	echo "\n\n";
}


//
// clas local copy function
//
function doCOPY() {
	global $description_obj;
	global $table_name, $class_name;
	global $tabs, $tab2, $tab3;

	// fComment2($tab2,"if \$obj is set, update class members");

	echo "\n";
	$c = array('copy an object to the local members', '',
				"@param mixed \$obj\tthe object to copy.");

	fFuncStart("copy(\$obj)", $c);

	echo $tab2,"if (\$obj == null)\n",
		 $tab3,"return;\n";

	echo "\n",
		 $tab2,"foreach(\$obj as \$key => \$val) {\n",
		 	$tab3,"\$this->\$key = \$val;\n",
		 $tab2,"}\n";

	fFuncEnd();

}

//
// class load function
//
function doLOAD() {
	global $description_obj;
	global $table_name, $class_name;
	global $tabs, $tab2, $tab3;

	$keyObj = getKeyFieldObj();
	$keyField = $keyObj->Field;

	$ktype = getPHPType($keyObj);

	$c = array('load a record', '',
				"@param $ktype \$key\tthe '$keyField' to load.",
				'',
				"@return object\t\tthe object loaded, or null if error.");

	fFuncStart("load(\$key)", $c);
		echo $tab2,"\$DB = \$this->DB;\n\n";

		if (DO_PREPARED) {

			echo $tab2,"if (\$this->prep_load == null) {\n";
			fComment2($tab3,"create prepared statement");

			//
			// build prepared load statement
			//
		 	echo $tab3,"\$this->prep_load = \$DB->prepare(\"SELECT * FROM {$table_name} WHERE {$keyField}=?\");\n";

			$vars = "";
			$pass = 0;
			foreach($description_obj as $obj) {
				if (++$pass > 1)
					$vars .= ",";
				$vars .= "\$this->{$obj->Field}";
			}
			echo $tab2,"}\n\n";

			fComment2($tab2,"attach parameters and execute previously prepared sql statement");
			$t = getBindType($keyObj);
			echo $tab2,"\$this->prep_load->bind_param(\"$t\", \$key);\n";
			echo $tab2,"\$this->prep_load->execute();\n",
				 $tab2,"\$this->prep_load->store_result();\n",
				 $tab2,"\$this->prep_load->bind_result($vars);\n\n",

			fComment2($tab2,"load results");
			echo $tab2,"if (\$this->prep_load->fetch() !== TRUE) {\n",
				 $tab3,"\$this->_last_error = \$DB->error; \n",
				 $tab3,"\$this->prep_load->free_result();\n",
				 $tab3,"return null;\n",
				 $tab2,"}\n\n",
				 $tab2,"\$this->prep_load->free_result();\n\n";
		}

		if (DO_STANDARD) {
			if (DO_PREPARED)
				echo $tab2,"/*\n";
			//
			//
			//
			if (strpos($keyObj->Type,"int") !== false || !strncmp($keyObj->Type,"decimal",7)) {
				$k = "intval(\$key)";
			}
			else if (!strncmp($keyObj->Type,"float",5)) {
				$k = "floatval(\$key)";
			}
			else
				$k = "\$DB->real_escape_string(\$key)";

			echo $tab2,"\$_key = $k;\n",
				 $tab2,"if (!(\$result = \$DB->query(\"SELECT * FROM $table_name WHERE $keyField='\$_key'\")))\n",
					$tab3,"return null;\n\n",
				 $tab2,"if (!(\$obj = \$result->fetch_object())) {\n",
					$tab3,"// opps - error\n",
					$tab3,"\$this->_last_error = \$DB->error; \n",
					$tab3,"\$result->close();\n",
					$tab3,"return null;\n",
				 $tab2,"}\n",
				 $tab2,"\$result->close();\n\n";

			foreach($description_obj as $obj) {
				echo $tab2,"\$this->{$obj->Field}\t=\t\$obj->$obj->Field;\n";
			}

			if (DO_PREPARED)
				echo $tab2,"*/\n";

			echo "\n";
		}


		echo "{$tab2}return \$this;\n";

	fFuncEnd();
}

//
// class delete function
//
function doDELETE() {
	global $description_obj;
	global $table_name, $class_name;
	global $tabs, $tab2, $tab3;

	$keyObj = getKeyFieldObj();
	$keyField = $keyObj->Field;
	$ktype = getPHPType($keyObj);

	$c = array('Delete a record.', '', "@param $ktype \$key\tthe '$keyField' to delete.");
	fFuncStart("delete(\$key)", $c);
		echo $tab2,"\$DB = \$this->DB;\n\n";

		if (DO_PREPARED) {

			echo $tab2,"if (\$this->prep_delete == null) {\n";

			//
			// build prepared load statement
			//
			fComment2($tab3,"create prepared statement");
		 	echo $tab3,"\$this->prep_delete = \$DB->prepare(\"DELETE FROM $table_name WHERE $keyField=? LIMIT 1\");\n";
			echo $tab2,"}\n\n";

			fComment2($tab2,"attach parameters and execute previously prepared sql statement");
			$t = getBindType($keyObj);
			echo $tab2,"\$this->prep_delete->bind_param(\"$t\", \$key);\n";
			echo $tab2,"\$this->prep_delete->execute();\n\n";
		}


		if (DO_STANDARD) {

			if (DO_PREPARED) echo $tab2,"/*\n";

			if (strpos($keyObj->Type,"int") !== false || !strncmp($keyObj->Type,"decimal",7)) {
				$k = "intval(\$key)";
			}
			else if (!strncmp($keyObj->Type,"float",5)) {
				$k = "floatval(\$key)";
			}
			else
				$k = "\$DB->real_escape_string(\$key)";

			//echo $tab2,"\$key = \$DB->real_escape_string(\$key);\n",
			echo $tab2,"\$_key = $k;\n",
				 $tab2,"\$DB->query(\"DELETE FROM $table_name WHERE $keyField='\$_key' LIMIT 1\");\n\n";

			if (DO_PREPARED) echo $tab2,"*/\n";
		}

	fFuncEnd();
}


//
// class insert function
//
function doINSERT() {
	global $description_obj;
	global $table_name, $class_name;
	global $tabs, $tab2, $tab3, $tab4;

	$keyObj = getKeyFieldObj();
	$keyField = $keyObj->Field;
	$have_auto_inc = false;

	$c = array('Insert a record into the database.', '',
		"@param object \$obj\toptional object or array to insert (if used, \$this is updated).",
		'',
		'@return -1 on error'
		);

	fFuncStart("insert(\$obj=null)", $c);
		echo $tab2,"\$DB = \$this->DB;\n\n";

		fComment2($tab2,"if \$obj is set, update class members");
		echo $tab2, "if (\$obj != null) {\n";
			generateObjArrayCluster('this', 'obj', $tab3, true, true);
		echo "$tab2}\n\n";

		if (DO_PREPARED) {

			$typs = "";
			$vars = "";
			$tags = "";
			$names= "";
			$pass = 0;
			foreach($description_obj as $obj) {
				if ($obj->Extra === 'auto_increment') {
					$have_auto_inc = true;
					continue;
				}

				if (++$pass > 1) {
					$vars .= ",";
					$names .= ",";
					$tags .= ",";
				}
				$vars .= "\$this->{$obj->Field}";
				$tags .= "?";
				$names.= "{$obj->Field}";
				$typs .= getBindType($obj);
			}

			echo $tab2,"if (\$this->prep_insert == null) {\n";
			fComment2($tab3,"create prepared statement and bind paramters");
		 	echo $tab3,"\$this->prep_insert = \$DB->prepare(\"INSERT INTO {$table_name} ({$names}) VALUES ($tags)\");\n";
			echo $tab3,"\$this->prep_insert->bind_param(\"$typs\", $vars);\n";
			echo $tab2,"}\n\n";

			fComment2($tab2,"execute previously prepared sql statement");
			echo $tab2,"if (\$this->prep_insert->execute() === FALSE) {\n",
				 $tab3,"\$this->_last_error = \$DB->error; \n",
				 $tab3,"return -1;\n",
				 $tab2,"}\n\n";
		}

		if (DO_STANDARD) {

			if (DO_PREPARED) echo $tab2,"/*\n";

			//
			// normalize the data
			//
			fComment2($tab2,"normalize the data");
			foreach($description_obj as $obj) {
				//print_r($obj);
				//if ($obj->Key == 'PRI' && $obj->Extra == 'auto_increment') {
				if ($obj->Extra === 'auto_increment') {
					$have_auto_inc = true;
					echo $tab2,"// skipped $obj->Field\n";
					continue;
				}

				if (strpos($obj->Type,"int") !== false) {
					echo $tab2,"\$_{$obj->Field} = intval(\$this->$obj->Field);\n";
				}
				else if (!strncmp($obj->Type,"decimal",7) || !strncmp($obj->Type,"float",5)) {
					echo $tab2,"\$_{$obj->Field} = floatval(\$this->$obj->Field);\n";
				}

				else if ($obj->Type === "timestamp") {
					if ($obj->Default !== 'CURRENT_TIMESTAMP') {
						echo $tab2,"\$_{$obj->Field} = \$DB->real_escape_string(\$this->$obj->Field);\n";
					}
				}

				else if (strpos($obj->Type,"date") !== false) {
					echo $tab2,"\$_{$obj->Field} = \$DB->real_escape_string(\$this->$obj->Field);\n";
				}

				else {
					echo $tab2,"\$_{$obj->Field} = \$DB->real_escape_string(\$this->$obj->Field);\n";
				}
			}
			echo "\n";

			//
			// create sql statement
			//
			fComment2($tab2,"create the sql statement");
			echo $tab2,"\$sql = 'INSERT INTO $table_name (";
			$pass = 0;
			foreach($description_obj as $obj) {
				if ($obj->Extra==='auto_increment' || $obj->Default==='CURRENT_TIMESTAMP') {
					//print_r($obj);
					continue;
				}

				if (++$pass > 1)
					echo ",";
				echo $obj->Field;
			}
			echo ") VALUES '.\n";

			echo $tab3,'"(';
			$pass = 0;
			foreach($description_obj as $obj) {
				//print_r($obj);
				if ($obj->Extra === 'auto_increment' || $obj->Default === 'CURRENT_TIMESTAMP')
					continue;

				if (++$pass > 1)
					echo ",";

				$isInt = !strncmp($obj->Type,"int",3);
				if ($isInt) {
					echo "\$_{$obj->Field}";
				}
				else {
					echo "'\$_{$obj->Field}'";
				}
			}
			echo ")\";\n\n";


			fComment2($tab2,"do it");
			echo $tab2,"\$result = \$DB->query(\$sql);\n",
				 $tab2,"if (\$result == null) {\n",
				 $tab3,"\$this->_last_error = \$DB->error; \n",
				 $tab3,"return -1;\n",
				 $tab2,"}\n";


			if (DO_PREPARED) echo $tab2,"*/\n";
		}


		if ($have_auto_inc)
			echo $tab2,"return \$DB->insert_id;\n";
		else
			echo $tab2,"return 0;\n";

	fFuncEnd();

}

//
// class update function
//
function doUPDATE() {
	global $description_obj;
	global $table_name, $class_name;
	global $tabs, $tab2, $tab3;

	$keyField = getKeyFieldName();
	$keyObj = getKeyFieldObj();

	//
	// class update function
	//
	$c = array('Update a record.', '',
		"@param object \$obj\toptional object or array to update to db (if used, \$this is updated).",
		'',
		'@return -1 on error, number of affected rows otherwise.'
		);

	fFuncStart("update(\$obj=null)", $c);
		echo $tab2,"\$DB = \$this->DB;\n\n";
		
		fComment2($tab2,"if \$obj is set, update class members");
		// echo $tab2,"if (\$obj != null) {\n";

		// generateObjArrayCluster($leftVar, $rightVar, $tab, $addIsSet=true, $validateKeys=false) {
		// generateObjArrayCluster('this', 'obj', $tab3, true, false, true);
		echo $tab2, "\$this->copy(\$obj);\n\n";
		// echo $tab2,"\n\n";

		if (DO_PREPARED) {
			fComment2($tab2,"if prepared statement is null...");

			$typs = "";
			$vars = "";
			$names= "";
			$pass = 0;
			foreach($description_obj as $obj) {
				if ($obj->Extra === 'auto_increment') {
					$have_auto_inc = true;
					continue;
				}

				if (++$pass > 1) {
					$vars .= ",";
					$names .= ",";
				}
				$vars .= "\$this->{$obj->Field}";
				$names.= "{$obj->Field}=?";
				$typs .= getBindType($obj);
			}
			$typs .= getBindType($keyObj);
			$vars .= ",\$this->{$keyObj->Field}";

			echo $tab2,"if (\$this->prep_update == null) {\n";
			fComment2($tab3,"create prepared statement and bind paramters");
		 	echo $tab3,"\$this->prep_update = \$DB->prepare(\"UPDATE {$table_name} SET {$names} WHERE {$keyField}=?\");\n";
			echo $tab3,"\$this->prep_update->bind_param(\"$typs\", $vars);\n";
			echo $tab2,"}\n\n";

			fComment2($tab2,"execute previously prepared sql statement");
			echo $tab2,"if (\$this->prep_update->execute() === FALSE) {\n",
				 $tab3,"\$this->_last_error = \$DB->error; \n",
				 $tab3,"return -1;\n",
				 $tab2,"}\n\n";
				 //$tab2,"\$this->prep_update->store_result();\n\n";

			if (!DO_STANDARD) {
				fComment2($tab2,"return number of affected rows");
				echo $tab2,"\$this->_affected_rows = \$this->prep_update->affected_rows;\n".
					 $tab2,"return \$this->_affected_rows;\n";
			}

		}


		if (DO_STANDARD) {
			if (DO_PREPARED) echo $tab2,"/*\n";

			//
			// create sql statement
			//
			fComment2($tab2,"create the sql statement");
			echo $tab2,"\$sql = \"UPDATE $table_name SET \".\n";

			$pass = 0;
			$comma = '';
			foreach($description_obj as $obj) {
				if ($obj->Extra === 'auto_increment' || $obj->Default === 'CURRENT_TIMESTAMP')
					continue;

				if (++$pass > 1)
					$comma = ",";

				$fname = escapeField($obj, 'this');
				//echo $tab3,"'$comma$obj->Field=' . {$fname} . \n";

				if (strpos($obj->Type,"int") !== false || !strncmp($obj->Type,"decimal",7) || !strncmp($obj->Type,"float",5)) {
					echo $tab3,"'$comma$obj->Field=' . {$fname} .\n";
				}
				else if ($obj->Type === "timestamp") {
					if ($obj->Default !== 'CURRENT_TIMESTAMP') {
						//echo "$obj->Field='\$_{$obj->Field}'";
						//echo $tab3,"\"$comma$obj->Field=\$_{$obj->Field}\".\n";
						echo $tab3,"'$comma$obj->Field=' . {$fname} .\n";
					}
				}
				else {
					//echo $tab3,"\"$comma$obj->Field='\$_{$obj->Field}'\".\n";
					echo $tab3,"\"$comma$obj->Field='\" . $fname . \"'\" .\n";
				}

			}
			echo $tab3,"\" WHERE {$keyObj->Field}='\" . ",escapeField($keyObj,'this')," . \"' LIMIT 1\";\n\n";


			fComment2($tab2,"do it");
			echo $tab2,"\$result = \$DB->query(\$sql);\n",
				 $tab2,"if (\$result == null) {\n",
				 $tab3,"\$this->_last_error = \$DB->error; \n",
				 $tab3,"return -1;\n",
				 $tab2,"}\n";

			if (DO_PREPARED) {
			  echo $tab2,"*/\n\n".
			  	   $tab2,"\$this->_affected_rows = \$this->prep_update->affected_rows;\n".
			  	   $tab2,"return 1;\n";
			}
			else {
			  echo "\n",$tab2,"return \$DB->affected_rows;\n";
			}
		}

	fFuncEnd();
}

//
// static access functions
//
function doSTATIC() {
	global $description_obj;
	global $table_name, $class_name;
	global $tabs, $tab2, $tab3;

	$c = str_repeat("*", 78);
	echo "$tabs//$c\n",
		 "$tabs// static methods\n",
		 "$tabs//$c\n\n";

	$keyField = getKeyFieldName();

	fStaticStart("_get_instance()", 'get the static instance');
		echo $tab2,"return {$class_name}::\$_instance;\n";
	fFuncEnd();


	$c = array('initialize for static access', '', "@param mysqli \$db\tan instance of mysqli.");
	fStaticStart("_init(\$db)", $c);
		echo $tab2,"if ({$class_name}::\$_instance == null)\n",
			 $tab3,"{$class_name}::\$_instance = new {$class_name}(\$db);\n";
	fFuncEnd();

	// static load
	$c = array('load a record', '',
				"@param string \$key\tthe '$keyField' to load.",
				'',
				"@return object\t\tthe object loaded, or null if error.");
	fStaticStart("_load(\$key)", $c);
		echo $tab2,"if ({$class_name}::\$_instance == null)\n",
			 $tab3,"die('{$class_name} not initialized for static access');\n";

		 echo $tab2,"return {$class_name}::\$_instance->load(\$key);\n";
	fFuncEnd();


	// static insert
	$c = array('insert a record into database', '',
				"@param object \$obj\toptional object or array to insert",
				'',
				"@return int\t\t\t-1 if error, >=0 otherwise");

	fStaticStart("_insert(\$obj=null)", $c);
		echo $tab2,"if ({$class_name}::\$_instance == null)\n",
			 $tab3,"die('{$class_name} not initialized for static access');\n";

		 echo $tab2,"return {$class_name}::\$_instance->insert(\$obj);\n";
	fFuncEnd();


	// static update
	$c = array('update a record', '',
			   "@param object \$obj\toptional object or array to update to db (if used, \$this is updated).",
				'',
				"@return int\t\t\t-1 if error, >=0 otherwise");

	fStaticStart("_update(\$obj=null)", $c);
		echo $tab2,"if ({$class_name}::\$_instance == null)\n",
			 $tab3,"die('{$class_name} not initialized for static access');\n";

		 echo $tab2,"return {$class_name}::\$_instance->update(\$obj);\n";
	fFuncEnd();

	// static delete
	$c = array('delete a record', '',
				"@param string \$key\tthe '$keyField' to delete.");
	fStaticStart("_delete(\$key)", $c);
		echo $tab2,"if ({$class_name}::\$_instance == null)\n",
			 $tab3,"die('{$class_name} not initialized for static access');\n";

		 echo $tab2,"{$class_name}::\$_instance->delete(\$key);\n";
	fFuncEnd();

	// static get_last_error
	fStaticStart("_get_last_error()", 'get last error');
		echo $tab2,"return {$class_name}::\$_instance->_last_error;\n";
	fFuncEnd();

}



function generateObjArrayCluster($leftVar, $rightVar, $tab, $addIsSet=true, $validateKeys=false) {
	global $description_obj;
	global $table_name, $class_name;

	$tab1 = $tab;
	$tab2 = $tab1 . "\t";

	//
	// do the assignments
	//
	if ($validateKeys) {
		fComment2($tab1,"validate key fields are in '$rightVar'");
		foreach($description_obj as $obj) {
			if ($obj->Key == '' || $obj->Extra === 'auto_increment')
				continue;
			if ($obj->Key === 'PRI' || $obj->Key === 'MUL') {
				echo $tab1,"\$obj = (object)\$obj;\n",
					 $tab1,"if (!isset(\${$rightVar}->{$obj->Field}))\n",
					 $tab2,"die('missing key field: {$obj->Field}');\n";
			}
		}
		echo "\n";
	}

	echo $tab1,"\$this->copy(\$obj);\n";

	// echo $tab1,"foreach(\$obj as \$key => \$val) {\n",
	// 	 	$tab2,"\$this->\$key = \$val;\n",
	// 	 $tab1,"}\n";
}


function tabTo($str, $offset, $to_col) {
	$col = $offset + strlen($str) - 1;

	$cnt = $col % 4;
	if ($cnt > 0) {
		$col += (4-$cnt);
		$str = "$str\t";
	}

	$to_col--;	// make zero based
	while ($col < $to_col) {
		$col += 4;
		$str = "$str\t";	
	}

	return $str;
}


function getKeyFieldObj() {
	global $description_obj;

	foreach($description_obj as $obj) {
		if ($obj->Key === 'PRI' /*&& $obj->Extra === 'auto_increment'*/) {
			return $obj;
		}
	}

	$o = new stdClass();
	$o->Field = '<undefined>';
	$o->Type = 'varchar';
	$o->Null = 'YES';
	$o->Key = '';
	$o->Default = '';
	$o->Extra = '';
	return $o;
}

function getKeyFieldName() {
	$obj = getKeyFieldObj();
	if ($obj == null)
		return '<key>';
	return $obj->Field;
}


function indent($extra=0) {
	return str_repeat("\t", ($GLOBALS['indent']+$extra));
}

function fComment($tabs,$comment) {
	if (is_array($comment)) {
		echo $tabs,"/** \n";
		foreach($comment as $c) {
			echo $tabs," * $c\n";
		}
		echo $tabs," */\n";
	}
	else {
		echo $tabs,"/** \n",
			 $tabs," * $comment\n",
		 	 $tabs," */\n";
	}
}

function fComment2($tabs,$comment) {
	echo $tabs,"//\n",
		 $tabs,"// $comment\n",
		 $tabs,"//\n";
}

function fFuncStart($name, $comment) {
	global $tabs;

	if (is_array($comment)) {
		echo $tabs,"/** \n";
		foreach($comment as $c) {
			echo $tabs," * $c\n";
		}
		echo $tabs," */\n",
			 $tabs,"public function $name {\n";
	}
	else {
		echo $tabs,"/** \n",
			 $tabs," * $comment\n",
			 $tabs," */\n",
		 	 $tabs,"public function $name {\n";
	}
}


function escapeField($obj, $tag) {

	if (strpos($obj->Type,"int") !== false || !strncmp($obj->Type,"decimal",7)) {
		return "intval(\${$tag}->{$obj->Field})";
	}

	if (!strncmp($obj->Type,"float",5)) {
		return "floatval(\${$tag}->{$obj->Field})";
	}

	//if ($obj->Type === "timestamp") {
	//	return "\${$obj->Field}";
	//}

	return "\$DB->real_escape_string(\${$tag}->{$obj->Field})";
}

function assignEscape($obj) {

	if (strpos($obj->Type,"int") !== false || !strncmp($obj->Type,"decimal",7)) {
		return "intval(\$val)";
	}

	if (!strncmp($obj->Type,"float",5)) {
		return "floatval(\$val)";
	}

	return "\$val";
}


function getBindType($obj) {
	if (strpos($obj->Type,"int") !== false || strpos($obj->Type,"decimal") !== false) {
		return 'i';
	}

	if (!strncmp($obj->Type,"float",5) || strpos($obj->Type,"double") !== false) {
		return 'd';
	}

	//if (strpos($obj->Type,"blob") !== false || strpos($obj->Type,"text") !== false) {
	if (strpos($obj->Type,"blob") !== false) {		
		return 'b';
	}

	return 's';
}

function getPHPType($obj) {
	if (strpos($obj->Type,"int") !== false || strpos($obj->Type,"decimal") !== false) {
		return 'integer';
	}

	if (!strncmp($obj->Type,"float",5) || strpos($obj->Type,"double") !== false) {
		return 'double';
	}

	if (strpos($obj->Type,"blob") !== false || strpos($obj->Type,"text") !== false) {
		return 'text';
	}

	if (strpos($obj->Type,"date") !== false) {
		return 'date';
	}

	return 'string';
}



function fStaticStart($name, $comment) {
	global $tabs;

	if (is_array($comment)) {
		echo $tabs,"/** \n";
		foreach($comment as $c) {
			echo $tabs," * $c\n";
		}
		echo $tabs," */\n",
			 $tabs,"public static function $name {\n";
	}
	else {
		echo $tabs,"/** \n",
			 $tabs," * $comment\n",
			 $tabs," */\n",
		 	 $tabs,"public static function $name {\n";
	}
}


function fFuncEnd() {
	echo $GLOBALS['tabs'],"}\n\n\n";
}


?>
